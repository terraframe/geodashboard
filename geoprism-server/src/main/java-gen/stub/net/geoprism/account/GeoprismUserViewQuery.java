package net.geoprism.account;

import net.geoprism.GeoprismUserQuery;

import org.json.JSONArray;
import org.json.JSONObject;

import com.runwaysdk.query.OIterator;

/**
 *
 * @author Autogenerated by RunwaySDK
 */
public class GeoprismUserViewQuery extends net.geoprism.account.GeoprismUserViewQueryBase 
{

  public GeoprismUserViewQuery(com.runwaysdk.query.QueryFactory queryFactory)
  {
    super(queryFactory);
    this.buildQuery(new DefaultGeoprismUserViewBuilder(queryFactory));
  }

  public GeoprismUserViewQuery(com.runwaysdk.query.QueryFactory queryFactory, com.runwaysdk.query.ViewQueryBuilder viewQueryBuilder)
  {
    super(queryFactory, viewQueryBuilder);
  }

  class DefaultGeoprismUserViewBuilder extends com.runwaysdk.query.ViewQueryBuilder
  {
    protected GeoprismUserQuery qUser;
    
    public DefaultGeoprismUserViewBuilder(com.runwaysdk.query.QueryFactory queryFactory)
    {
      super(queryFactory);
      
      this.qUser = new GeoprismUserQuery(queryFactory);
      
    }

    protected GeoprismUserViewQuery getViewQuery()
    {
      return (GeoprismUserViewQuery)super.getViewQuery();
    }

    /**
     * build the select clause
     */
    protected void buildSelectClause()
    {
      GeoprismUserViewQuery vQuery = this.getViewQuery();

      vQuery.map(GeoprismUserView.USER, qUser.getOid());
      vQuery.map(GeoprismUserView.USERNAME, qUser.getUsername());
//      vQuery.map(GeoprismUserView.PASSWORD, qUser.getUsername());
      vQuery.map(GeoprismUserView.FIRSTNAME, qUser.getFirstName());
      vQuery.map(GeoprismUserView.LASTNAME, qUser.getLastName());
      vQuery.map(GeoprismUserView.EMAIL, qUser.getEmail());
      vQuery.map(GeoprismUserView.PHONENUMBER, qUser.getPhoneNumber());
      vQuery.map(GeoprismUserView.INACTIVE, qUser.getInactive());
//      vQuery.map(GeoprismUserView.NEWINSTANCE, "false");
    }

    /**
     * Implement only if additional join criteria is required.
     */
    protected void buildWhereClause()
    {

    }

  }
  
  public JSONObject toJSON()
  {
    JSONObject json = new JSONObject();
    
    json.put("count", this.getCount());
    json.put("pageNumber", this.getPageNumber());
    json.put("pageSize", this.getPageSize());
    
    JSONArray resultSet = new JSONArray();
    
    OIterator<? extends GeoprismUserView> it = this.getIterator();
    
    try
    {
      for (GeoprismUserView view : it)
      {
        resultSet.put(view.toJSON());
      }
    }
    finally
    {
      it.close();
    }
    
    json.put("resultSet", resultSet);
    
    return json;
  }
}
